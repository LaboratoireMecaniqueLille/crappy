# coding: utf-8

"""
This example demonstrates the use of the DownSampler Modifier. It does not
require any specific hardware to run, but necessitates the matplotlib Python
module to be installed.

The DownSampler Modifier transmits only one data point every n received points
received from its upstream Block. It is therefore useful for reducing the data
rate in a given Link.

Here, a sine wave is generated by a Generator Block and sent to two Grapher
Blocks for display. One Grapher displays it as it is generated, and the other
displays it downsampled by a DownSampler Modifier. Because the frequency of the
sine wave is 1 Hz and the frequency of the Generator Block is twice that of the
DownSampler, the value passed to the second Grapher are always close to 1 or
-1, the peak of the sine wave.

After starting this script, just watch how the raw signal is transformed by the
DownSampler Modifier and alternates between 1 and -1. Also notice how the
initial data rate of the signal is divided when passing through the DownSampler
Modifier. This demo ends after 22s. You can also hit CTRL+C to stop it
earlier, but it is not a clean way to stop Crappy.
"""

import crappy
import numpy as np

if __name__ == '__main__':

  # This Generator Block generates a sine wave for the Graphers to display. It
  # sends it to one Grapher that displays it as is, and to another Grapher that
  # receives it downsampled by the DownSampler Modifier
  gen = crappy.blocks.Generator(
      # Generating a sine wave of amplitude 2 and frequency 1 and phase pi/2
      ({'type': 'Sine',
        'condition': 'delay=20',
        'amplitude': 2,
        'freq': 1,
        'phase': np.pi/2},),
      freq=30,  # Lowering the default frequency because it's just a demo
      cmd_label='sine',  # The label carrying the generated signal

      # Sticking to default for the other arguments
  )

  # This Grapher Block displays the raw sine wave it receives from the
  # Generator. As the Generator runs at 30Hz, 30 data points are received each
  # second for display
  graph = crappy.blocks.Grapher(
      ('t(s)', 'sine'),  # The names of the labels to plot on the graph
      interp=False,  # Not linking the displayed spots, to better see the
      # frequency of the input
      length=100,  # Only displaying the data for the last 100 points

      # Sticking to default for the other arguments
  )

  # This Grapher Block displays the downsampled sine wave it receives from the
  # Generator. Because the frequency of the sine wave is 1 Hz and the frequency
  # of the Generator Block is twice that of the DownSampler, only values close
  # to 1 and -1 are received.
  graph_down = crappy.blocks.Grapher(
      ('t(s)', 'sine'),  # The names of the labels to plot on the graph
      interp=False,  # Not linking the displayed spots, to better see the
      # frequency of the input

      # Sticking to default for the other arguments
  )

  # Linking the Block so that the information is correctly sent and received
  crappy.link(gen, graph)
  crappy.link(gen, graph_down,
              # Adding a DownSampler Modifier for downsampling the sine
              # wave before sending to the Grapher. A data point is sent for
              # display once every 15 received points
              modifier=crappy.modifier.DownSampler(15))

  # Mandatory line for starting the test, this call is blocking
  crappy.start()
