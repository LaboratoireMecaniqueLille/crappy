# coding: utf-8

"""
This example is an extension of the dic_ve_fake_test.py script, in which the
deformation speed is not imposed by a Generator but driven by a PID to match a
target value. It would correspond to a real-life situation where the
extension of the sample cannot be driven easily and a controller has to be used
for that purpose.

It requires matplotlib, opencv-python, scikit-image and Pillow to run.
"""

import crappy


def plastic_law(_: float) -> float:
  """No plastic law in this simple example."""

  return 0.


if __name__ == "__main__":

  # Loading the example image for performing image correlation
  # This image is distributed with Crappy
  img = crappy.resources.speckle

  # This Generator Block generates the target extension command to send to the
  # PID Block as a setpoint. The signal is so that the target extension has a
  # triangle shape oscillating between 0 and 1
  gen = crappy.blocks.Generator(
      # Generating 3 successive triangles starting
      path=[{'type': 'CyclicRamp',
             'speed1': 5 / 60,
             'condition1': 'target_Exx(%)>1',
             'speed2': -5 / 60,
             'condition2': 'target_Exx(%)<0',
             'cycles': 3,
             'init_value': 0}],
      cmd_label='target_Exx(%)',  # The label carrying the generated signal
      freq=30,  # Lowering the default frequency because it's just a demo

      # Sticking to default for the other arguments
  )

  # This FakeMachine Block takes the speed command from the PID Block
  # as an input, and outputs the extension and the stress to the DISCorrel
  # Block
  machine = crappy.blocks.FakeMachine(
      rigidity=5000,  # The stiffness of the fake sample
      l0=20,  # The initial length of the fake sample
      max_strain=17,  # The fake sample breaks passed this strain value
      sigma={'F(N)': 0.5},  # Adding noise to the effort signal
      plastic_law=plastic_law,  # Adding the custom plastic law to the model of
      # the fake sample
      freq=50,  # Lowering the default frequency because it's just a demo
      cmd_label='pid',  # The label carrying the output of the pid

      # Sticking to default for the other arguments
  )

  # This DISCorrel Block computes the extension using image correlation, on an
  # image stretched based on the extension values received from the FakeMachine
  # Block. The pair FakeMachine + DISCorrel Blocks thus models the behavior of
  # an equivalent tensile test setup
  dis = crappy.blocks.DISCorrel(
      '',  # The name of Camera to open is ignored because image_generator is
      # given
      display_images=True,  # The displayer window will allow to follow the
      # spots on the acquired images
      labels=['t(s)', 'meta', 'x', 'y', 'meas_Exx(%)', 'meas_Eyy(%)'],
      image_generator=crappy.tool.ApplyStrainToImage(img),  # This argument
      # makes the Block generate fake strain on the given image, only useful
      # for demos
      freq=50,  # Lowering the default frequency because it's just a demo
      iterations=0,  # Limiting the time spent on each computation
      finest_scale=2,  # Limiting the time spent on each computation

      # Sticking to default for the other arguments
  )

  # This PID Block modulates the deformation speed of the fake sample so that
  # the extension measured by the DISCorrel Block matches the target extension
  # generated by the Generator Block. It takes the setpoint as an input from
  # the Generator, and the measured extension as an input from the DISCorrel.
  # It outputs the deformation speed to the FakeMachine Block.
  pid = crappy.blocks.PID(
      kp=0.5,  # The coefficient of the proportional term of the PID
      ki=1.0,  # The coefficient of the integral term of the PID
      kd=0.025,  # The coefficient of the derivative term of the PID
      setpoint_label='target_Exx(%)',  # The label carrying the setpoint
      input_label='meas_Exx(%)',  # The label carrying the measured extension
      # value
      freq=50,  # Lowering the default frequency because it's just a demo

      # Sticking to default for the other arguments
  )

  # This Grapher Block plots the extension data it receives from the
  # DISCorrel Block
  graph = crappy.blocks.Grapher(
      # The names of the labels to plot on the graph
      ('t(s)', 'meas_Exx(%)'), ('t(s)', 'target_Exx(%)'),

      # Sticking to default for the other arguments
  )

  # Linking the Block so that the information is correctly sent and received
  crappy.link(gen, pid)
  crappy.link(gen, gen)
  crappy.link(dis, pid)
  crappy.link(pid, machine)
  crappy.link(machine, dis)
  crappy.link(dis, graph)
  crappy.link(gen, graph)

  # Mandatory line for starting the test, this call is blocking
  crappy.start()
