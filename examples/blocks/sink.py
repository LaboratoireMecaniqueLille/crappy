# coding: utf-8

"""
This example demonstrates the use of the Sink Block. It does not require any
hardware nor specific Python module to run.

The Sink Block discards any data it receives, and does nothing more. It is
mainly intended for debugging, or for use as a replacement for a Block still to
be added when prototyping a script. It is indeed not the most useful Block, but
come on it took 5 minutes to write.

Here, the Sink Block discards the data it receives from a Generator Block. And
that's it.

After starting this script, watch how really nothing happens as the generated
data is immediately discarded. In the console, you can still see that the Sink
Block is alive as it displays its looping frequency. This script ends after
17s. You can also hit CTRL+C to stop it earlier, but it is not a clean way to
stop Crappy.
"""

import crappy

if __name__ == '__main__':

  # This Generator Block outputs a Constant signal for the Sink to ignore.
  gen = crappy.blocks.Generator(
      # Generating a constant value of 0 during 15s
      ({'type': 'Constant', 'condition': 'delay=15', 'value': 0},),
      cmd_label='cmd',  # The label carrying the generated value
      freq=50,  # Lowering the default frequency because it's just a demo
      spam=True,  # Sending a value at each loop

      # Sticking to default for the other arguments
  )

  # This Sink Block receives the data generated by the Generator Block, and
  # does absolutely nothing with it. It only displays its own looping
  # frequency, so that you can see it's not just dead
  sink = crappy.blocks.Sink(
      display_freq=True,  # Displaying the looping frequency to show there's
      # some activity

      # Sticking to default for the other arguments
  )

  # Linking the Block so that the information is correctly sent and received
  crappy.link(gen, sink)

  # Mandatory line for starting the test, this call is blocking
  crappy.start()
