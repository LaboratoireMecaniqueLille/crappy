# coding: utf-8

"""
This example demonstrates the use of a Machine Block in the case when it has to
drive multiple Actuators at once. It does not require any specific hardware to
run, but necessitates the matplotlib Python module to be installed.

The Machine Block can drive one or several Actuators in speed or in position,
based on the setpoints it receives from upstream Blocks. It can also retrieve
the current speed and/or position from the driven Actuators, and send it to
downstream Blocks.

Here, a Machine Block drives two FakeStepperMotor Actuators in speed at once.
The setpoint is generated by a Generator as a cyclic speed value, and one of
the motors receives an inverted setpoint value so that their behavior is
symmetrical. This behavior would be desired for example in a tensile test
machine equipped with two motors. Finally, the positions of both motors are
sent to a Grapher Block for display.

After starting this script, observe how both Actuators are successfully being
driven in a symmetrical way. Notice how little the script differs from the
basic one that only drives one Actuator. This script ends after 20s. You can
also hit CTRL+C to stop it earlier, but it is not a clean way to stop Crappy.
"""

import crappy

# The name of the labels carrying the setpoints for the two motors
cmd_label = 'cmd'
cmd_label_inv = 'cmd_inv'


def invert_cmd(data):
  """This function inverts the speed command and assigns it to the inverted
  command label.

  It allows to drive both motors symmetrically.
  """

  data[cmd_label_inv] = -data[cmd_label]
  return data


if __name__ == '__main__':

  # This Generator generates the speed command for both Actuators driven by the
  # Machine Block. The command is a cyclic one oscillating between 1 and -1 but
  # staying longer set on 1, so overall increasing
  gen = crappy.blocks.Generator(
      # Generating a cyclic signal oscillating between 1 and -1 with a delay of
      # 4s on 1 and 2s on -1
      ({'type': 'Cyclic',
        'value1': 1,
        'value2': -1,
        'condition1': 'delay=4',
        'condition2': 'delay=2',
        'cycles': 3},),
      freq=50,  # Lowering the default frequency because it is just a demo
      cmd_label=cmd_label,  # The label carrying the speed command

      # Sticking to default for the other arguments
  )

  # This Machine Block drives two FakeStepperMotor Actuators at once. One of
  # them receives an inverted speed setpoint, so its behavior is symmetrical
  # to the one of the other motor. The positions of both motors are sent to the
  # Grapher Block for display
  mot = crappy.blocks.Machine(
      # Listing the Actuators to drive and their characteristics
      # Only the setpoint and readout labels differ between them
      ({'cmd_label': cmd_label,
        'position_label': 'pos_mot_1(mm)'},
       {'cmd_label': cmd_label_inv,
        'position_label': 'pos_mot_2(mm)'}),
      # These values are common to both Actuators, so they are given here to
      # avoid repetitions
      common={'type': 'FakeStepperMotor',
              'mode': 'speed'},
      freq=50,  # Lowering the default frequency because it is just a demo

      # Sticking to default for the other arguments
  )

  # This Grapher displays the real-time position of both Actuators driven by
  # the Machine Block. Notice how both curves are symmetrical.
  graph = crappy.blocks.Grapher(
      # The names of the labels to plot on the graph
      ('t(s)', 'pos_mot_1(mm)'), ('t(s)', 'pos_mot_2(mm)')

      # Sticking to default for the other arguments
  )

  # Linking the Block so that the information is correctly sent and received
  # The modifier on the Link from the Generator to the Machine allows to invert
  # the speed command for one motor
  crappy.link(gen, mot, modifier=invert_cmd)
  crappy.link(mot, graph)

  # Mandatory line for starting the test, this call is blocking
  crappy.start()
