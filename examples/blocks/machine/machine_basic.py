# coding: utf-8

"""
This example demonstrates the use of a Machine Block in the simplest possible
use case, for driving a fake motor in speed. It does not require any specific
hardware to run, but necessitates the matplotlib Python module to be installed.

The Machine Block can drive one or several Actuators in speed or in position,
based on the setpoints it receives from upstream Blocks. It can also retrieve
the current speed and/or position from the driven Actuators, and send it to
downstream Blocks.

Here, a Machine Block drives a FakeDCMotor Actuator in speed. The setpoint is
generated by a Generator, as a cyclic tension value. A Grapher allows following
the real-time dynamic behavior of the emulated DC motor.

After starting this script, observe how the speed of the DC motor evolves
according to the cyclic tension setpoint. You can also adjust the parameters of
the setpoint (magnitude, frequency) and see how the emulated DC motor reacts.
This script never ends and must be stopped by hitting CTRL+C.
"""

import crappy

if __name__ == '__main__':

  # This Generator generates the tension command for the DC motor
  # It outputs a cyclic tension and sends it to the Machine Block
  gen = crappy.blocks.Generator(
      # Generating a cyclic signal oscillating between 10V and -10V
      ({'type': 'Cyclic',
        'value1': -10,
        'condition1': 'delay=3',
        'value2': 10,
        'condition2': 'delay=3',
        'cycles': 0},),
      freq=50,  # Lowering the default frequency because it is just a demo
      cmd_label='tension(V)',  # The output of the Generator is a tension

      # Sticking to default for the other arguments
  )

  # This Machine Block only drives one single Actuator, a FakeDCMotor
  # It drives it in speed, based on the input tension it receives from the
  # Generator Block. The speed of the emulated DC motor is sent to the Grapher
  # via the 'speed(RPM)' label
  mot = crappy.blocks.Machine(
      ({'type': 'FakeDCMotor',  # The name of the Actuator to drive
        'cmd_label': 'tension(V)',  # The label carrying the setpoint
        'mode': 'speed',  # Driving here in speed mode, not in position mode
        'speed_label': 'speed(RPM)',  # The label carrying the speed readout
        'kv': 500},),  # An argument to pass to the FakeDCMotor
      freq=50,  # Lowering the default frequency because it is just a demo

      # Sticking to default for the other arguments
  )

  # This Grapher displays the real-time emulated speed of the DC motor
  graph = crappy.blocks.Grapher(
      # The names of the labels to plot on the graph
      ('t(s)', 'speed(RPM)'),

      # Sticking to default for the other arguments
  )

  # Linking the Block so that the information is correctly sent and received
  crappy.link(gen, mot)
  crappy.link(mot, graph)

  # Mandatory line for starting the test, this call is blocking
  crappy.start()
