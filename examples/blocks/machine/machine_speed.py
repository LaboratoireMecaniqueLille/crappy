# coding: utf-8

"""
This example demonstrates the use of a Machine Block in the case when a speed
value is specified while driving in position mode. It does not require any
hardware nor specific Python module to run.

The Machine Block can drive one or several Actuators in speed or in position,
based on the setpoints it receives from upstream Blocks. It can also retrieve
the current speed and/or position from the driven Actuators, and send it to
downstream Blocks.

Here, a Machine Block drives one FakeStepperMotor Actuator in position mode.
The position setpoint is generated by a Generator Block, as a cyclic position
value. Along with the position, a speed setpoint is also generated and sent to
the Machine Block. This speed value indicates the maximum speed at which the
Actuator can move for reaching the desired position. In this example, the motor
is allowed to go faster when moving towards positive positions. This
demonstrates the possibility to adjust the speed at runtime in position mode.

After starting this script, watch how the speed command is set on the motor and
how the speed differs for the two position setpoints. This script never ends
and must be stopped by hitting CTRL+C.
"""

import crappy

if __name__ == '__main__':

  # This Generator generates the position command for the Actuator driven by
  # the Machine Block. The command is a cyclic position oscillating between a
  # positive and a negative position
  gen_pos = crappy.blocks.Generator(
      # Generating a cyclic signal oscillating between 10 and -10 with a delay
      # of 5s each
      ({'type': 'Cyclic',
        'value1': 10,
        'value2': -10,
        'condition1': 'delay=5',
        'condition2': 'delay=5',
        'cycles': 0},),
      freq=50,  # Lowering the default frequency because it is just a demo
      cmd_label='cmd_pos(mm)',  # The label carrying the position command

      # Sticking to default for the other arguments
  )

  # This Generator generates the speed command providing the maximum speed at
  # which the Actuator is allowed to move for reaching the position setpoint.
  # It is a cyclic speed oscillating between 5 and 20 at the same pace as the
  # position command oscillates, and allowing the motor to move faster for
  # reaching positive positions than negative positions
  gen_speed = crappy.blocks.Generator(
      # Generating a cyclic signal oscillating between 5 and 20 with a delay of
      # 5s each
      ({'type': 'Cyclic',
        'value1': 20,
        'value2': 5,
        'condition1': 'delay=5',
        'condition2': 'delay=5',
        'cycles': 0},),
      freq=50,  # Lowering the default frequency because it is just a demo
      cmd_label='cmd_speed(mm/s)',  # The label carrying the speed command

      # Sticking to default for the other arguments
  )

  # This Machine Block drives a single FakeStepperMotor in position. Along with
  # the position commands, it also receives speed commands indicating the
  # maximum speed at which the Actuator can move. This way, it is possible to
  # adjust the speed at runtime when driving in position mode
  motor = crappy.blocks.Machine(
      ({'type': 'FakeStepperMotor',  # The name of the Actuator to drive
        'mode': 'position',  # Driving in position mode, not is speed mode
        'cmd_label': 'cmd_pos(mm)',  # The label carrying the position setpoint
        'speed_cmd_label': 'cmd_speed(mm/s)',  # The label carrying the maximum
        # speed for moving to the given position setpoint
        'position_label': 'pos(mm)'},),  # The label carrying the position
      # readout
      freq=50,  # Lowering the default frequency because it is just a demo
      spam=True,  # Re-setting the command at each loop, in case the speed
      # and position commands are not received simultaneously

      # Sticking to default for the other arguments
  )

  # This Grapher displays the real-time emulated position of the stepper motor
  graph = crappy.blocks.Grapher(
      # The names of the labels to plot on the graph
      ('t(s)', 'pos(mm)'),

      # Sticking to default for the other arguments
  )

  # Linking the Block so that the information is correctly sent and received
  crappy.link(gen_pos, motor)
  crappy.link(gen_speed, motor)
  crappy.link(motor, graph)

  # Mandatory line for starting the test, this call is blocking
  crappy.start()
