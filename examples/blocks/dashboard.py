# coding: utf-8

"""
This example demonstrates the use of the Dashboard Block. It does not require
any hardware to run.

The Dashboard Block displays the latest received values of a given set of
labels in a nice window. It is a very basic display Block of Crappy. In this
example, the Dashboard just displays values generated by two Generator Blocks.

After starting this script, just watch how the values are displayed and updated
on the Dashboard. This demo ends after 32s, or it can be stopped before by
hitting CTRL+C.
"""

import crappy

if __name__ == '__main__':

  # This generator generates a cyclic signal for the Dashboard to display. It
  # also stops the test after around 32 seconds
  gen_1 = crappy.blocks.Generator(
      # Generating a cyclic signal, oscillating between 1 and -1 with a period
      # of 6 seconds. It stops after 5 cycles
      ({'type': 'Cyclic',
        'condition1': 'delay=3',
        'condition2': 'delay=3',
        'value1': 1,
        'value2': -1,
        'cycles': 5},),
      freq=30,  # Lowering the default frequency because it's just a demo
      cmd_label='label_1'  # The label carrying the generated signal

      # Sticking to default for the other arguments
      )

  # This Generator generates a ramp signal for the Dashboard to display
  gen_2 = crappy.blocks.Generator(
      # Generating a ramp signal, starting from 0 and increasing forever at a
      # pace of 0.5 units per second
      ({'type': 'Ramp',
        'condition': None,
        'speed': 0.5,
        'init_value': 0},),
      freq=30,  # Lowering the default frequency because it's just a demo
      cmd_label='label_2'  # The label carrying the generated signal

      # Sticking to default for the other arguments
      )

  # The Dashboard Block displays the data received from the two Generators. It
  # also displays the current time value.
  dash = crappy.blocks.Dashboard(
      ('t(s)', 'label_1', 'label_2'),  # Listing all the labels to display
      nb_digits=2,  # Limit precision to 2 decimal digits

      # Sticking to default for the other arguments
      )

  # Linking the Block so that the information is correctly sent and received
  crappy.link(gen_1, dash)
  crappy.link(gen_2, dash)

  # Mandatory line for starting the test, this call is blocking
  crappy.start()
