# coding: utf-8

"""
This example demonstrates the use of the ClientServer Block for sending data to
an MQTT broker. It requires the Mosquitto MQTT broker to be installed on the
computer to run. It also requires the client.py script to be started before
starting this one. See https://mosquitto.org/ for installing Mosquitto.

In this example, the ClientServer Block sends to the MQTT broker the data it
receives from a Generator Block. Part of the data is also generated by a
Modifier on the Link from the Generator to the ClientServer. Before sending the
data, the Block also renames one label for a better integration on the client
side.

Before starting this script, make sure that the client.py example was started.
Once it is started and a graph is displayed, you can start this one. Not much
changes once this script starts, except a second curve should start being
drawn on the graph. This script must be stopped by hitting CTRL+C, and it
should be stopped before stopping the client.py one.
"""

import crappy


def is_positive(data):
  """This function sets the 'flag' label to 1 if the 'value' label is positive,
  otherwise it sets the 'flag' label to 0."""

  if 'value' in data:
    if data['value'] > 0:
      data['flag'] = 1
    else:
      data['flag'] = 0

  return data


if __name__ == '__main__':

  # This Generator generates the data to send to the client
  # This data is a CyclicRamp, starting from 0 and oscillating between 10 and
  # -10 with a period of approximately 10s
  gen = crappy.blocks.Generator(
      # The CyclicRamp to send to the server. A feedback loop allows to switch
      # to the next slope of the ramp
      ({'type': 'CyclicRamp', 'condition1': 'value>10',
        'condition2': 'value<-10', 'speed1': 2, 'speed2': -2, 'cycles': 0,
        'init_value': 0},),
      cmd_label='value',  # The label carrying the ramp value
      freq=30,  # Lowering the default frequency because it's just a demo

      # Sticking to default for the other arguments
      )

  # This ClientServer Block sends the data received from the Generator Block
  # to the MQTT broker
  # Before sending the data, it renames the time label so that it is not
  # mistaken with the local 't(s)' when received by the client
  server = crappy.blocks.ClientServer(
      broker=False,  # The client should already have started the MQTT broker
      address='localhost',  # Running the test locally on the computer
      port=1148,  # The network port to use for communication
      cmd_labels=('flag', ('t(s)', 'value')),  # The labels to send to the
      # client. The 't(s)' and 'value' labels are sent together to keep their
      # synchronization
      labels_to_send=('flag', ('t_server', 'value')),  # This argument renames
      # the labels actually sent, so that the time label is not mistaken with
      # the local 't(s)' when received by the client
      freq=60,
      spam=False,
  )

  # The Generator needs to be linked to itself because its stop conditions
  # depend on its output
  crappy.link(gen, gen)
  # The is_positive modifier is added to this Link to generate the values of
  # the 'flag' label
  crappy.link(gen, server, modifier=is_positive)

  # Mandatory line for starting the test, this call is blocking
  crappy.start()
